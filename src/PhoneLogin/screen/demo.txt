import React, {useState, useEffect} from 'react';
import {Button, TextInput} from 'react-native';
import auth from '@react-native-firebase/auth';
import {useTokenAuthen} from '../hook/useTokenAuthen';
import {Text} from 'react-native-elements';

export default function PhoneSignIn() {
  // If null, no SMS has been sent
  const [confirm, setConfirm] = useState<any>(null);

  // verification code (OTP - One-Time-Passcode)
  const [code, setCode] = useState('');
  const [name, setName] = useState<string>('');

  const [idToken, setIdToken] = useState<string>('');

  const mAuthtoken = useTokenAuthen();
  useEffect(() => {
    if (idToken) {
      const params = {
        idToken: idToken,
        fullName: name,
      };
      // mAuthtoken.mutate(params, {
      //   onSettled(data, error, variables, context) {
      //     console.log(
      //       'ðŸš€ ~ file: PhoneLoginScreen.tsx:113 ~ variables:',
      //       variables,
      //     );
      //     console.log('ðŸš€ ~ file: PhoneLoginScreen.tsx:113 ~ error:', error);
      //     console.log('ðŸš€ ~ file: PhoneLoginScreen.tsx:113 ~ data:', data);
      //   },
      // });
    }
  }, [idToken]);

  // Handle login
  async function onAuthStateChanged(user: any) {
    if (user) {
      const newIdToken = await user?.getIdToken();
      console.log(
        'ðŸš€ ~ file: PhoneLoginScreen.tsx:106 ~ newIdToken:',
        newIdToken,
      );

      if (newIdToken) {
        setIdToken(newIdToken);
      }
      // Some Android devices can automatically process the verification code (OTP) message, and the user would NOT need to enter the code.
      // Actually, if he/she tries to enter it, he/she will get an error message because the code was already used in the background.
      // In this function, make sure you hide the component(s) for entering the code and/or navigate away from this screen.
      // It is also recommended to display a message to the user informing him/her that he/she has successfully logged in.
    }
  }

  useEffect(() => {
    const subscriber = auth().onAuthStateChanged(onAuthStateChanged);
    return subscriber; // unsubscribe on unmount
  }, []);

  // Handle the button press
  async function signInWithPhoneNumber(phoneNumber: any) {
    console.log('phoneNumber:', phoneNumber);
    const confirmation = await auth().signInWithPhoneNumber(phoneNumber);
    console.log('confirmation:', confirmation);
    setConfirm(confirmation);
  }

  async function confirmCode() {
    try {
      console.log('Click !!!!!!!!!!!!!!');

      const res = await confirm.confirm(code);
      console.log('Confirm res:', res);
    } catch (error) {
      console.log('Invalid code.');
    }
  }

  if (!confirm) {
    return (
      <>
        <Text>Name</Text>
        <TextInput value={name} onChangeText={text => setName(text)} />
        <Button
          title="Phone Number Sign In"
          onPress={() => signInWithPhoneNumber('+84774122075')} // +84 774122075
        />
      </>
    );
  }

  return (
    <>
      <Text>OTP</Text>
      <TextInput value={code} onChangeText={text => setCode(text)} />
      <Button title="Confirm Code" onPress={() => confirmCode()} />
    </>
  );
}
